dat_mg |>
ggplot(aes(trat, comp))+
geom_jitter(width = 0.1)
dat_mg2 <- dat_mg |>
pivot_wider(names_from = trat, values_from= comp) |>
select(-rep)
dat_mg2
attach(dat_mg2)
t.test(control, Mg2)
#Com o attach(), o R passa a reconhecer diretamente as colunas control e Mg2 sem usar o $
attach(dat_mg2)
t_results <- t.test(control, Mg2)
library(report)
report(t_results)
library(rstatix)
t_test(comp ~ trat, data = dat_mg)
library(ggpubr)
p <- ggboxplot(
dat_mg, x = "trat", y = "comp",
color = "trat", palette = "jco"
) + ylim(0, 20)
# Verificar normalidade dos dados
hist(unaided) shapiro.test(unaided) shapiro.test(aided)
# Verificar normalidade dos dados
hist(unaided)
# Corrigir erro de digitação: 'assesssment' → 'assessment'
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
# Ler os dados da aba 'escala'
escala <- read_excel("dados-diversos.xlsx", sheet = "escala")
# Carregar pacote necessário
library(readxl)
library(rstatix)  # Para a função t_test()
# Teste t para amostras pareadas (acurácia entre avaliações)
t_test(acuracia ~ assessment,
data = escala,
paired = TRUE,        # Amostras pareadas
var.equal = FALSE)    # Não assume variância igual
# Boxplot para visualizar a diferença entre avaliações
escala |>
ggplot(aes(assessment, acuracia)) +
geom_boxplot()
# Corrigir erro de digitação: 'assesssment' → 'assessment'
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
# Teste de igualdade de variâncias
var.test(unaided, aided)
unaided <- escala |>
filter(assesssment =="unaided") |>
select(acuracia) |>
pull()
unaided <- escala |>
filter(assessment =="unaided") |>
select(acuracia) |>
pull()
aided <- escala |>
filter(assessment == "aided1") |>
select(acuracia) |>
pull()
var.test(unaided, aided)
wilcox.test(unaided, aided)
unaided <- escala |>
filter(assessment =="unaided") |>
select(acuracia) |>
pull()
aided <- escala |>
filter(assessment == "aided1") |>
select(acuracia) |>
pull()
var.test(unaided, aided1)
unaided <- escala |>
filter(assessment =="unaided") |>
select(acuracia) |>
pull()
aided <- escala |>
filter(assessment == "aided1") |>
select(acuracia) |>
pull()
escala$assessment <- str_trim(escala$assessment)  # remove espaços antes/depois
escala$assessment[escala$assessment == "aided"] <- "aided1"
table(escala$assessment)
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
# Agora deve funcionar
var.test(unaided, aided)
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
escala$assessment <- str_trim(escala$assessment)  # remove espaços antes/depois
escala$assessment[escala$assessment == "aided"] <- "aided1"
table(escala$assessment)
var.test(unaided, aided)
var.test(unaided, aided1)
var.test(unaided, aided)
unique(escala$assessment)
library(stringr)
escala$assessment <- str_trim(escala$assessment)  # remove espaços
escala$assessment[escala$assessment == "aided"] <- "aided1"
table(escala$assessment)
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
# Verificar distribuição e variância
hist(unaided)
escala |>
ggplot(aes(assessment, acuracia))+
geom_boxplot()
# Carregar pacote necessário
library(readxl)
library(dplyr)
library(ggplot2)
library(rstatix)  # Para a função t_test()
# Ler os dados da aba 'escala'
escala <- read_excel("dados-diversos.xlsx", sheet = "escala")
# Teste t para amostras pareadas (acurácia entre avaliações)
t_test(acuracia ~ assessment,
data = escala,
paired = TRUE,
var.equal = FALSE)
# Teste t para amostras pareadas (acurácia entre avaliações)
t_test(acuracia ~ assessment,
data = escala,
paired = TRUE,
var.equal = FALSE)
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided1 <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
# Verificar distribuição e variância
hist(unaided)
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided1 <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
# Verificar distribuição e variância
hist(unaided)
# Verificar distribuição e variância
hist(aided1)
aided1 <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
library(readxl)
library(dplyr)
library(ggplot2)
library(rstatix)
# Carregar os dados
escala <- read_excel("dados-diversos.xlsx", sheet = "escala")
# Teste t pareado
t_test(acuracia ~ assessment,
data = escala,
paired = TRUE,
var.equal = FALSE)
# Boxplot
escala |>
ggplot(aes(assessment, acuracia)) +
geom_boxplot()
# Corrigir os filtros com nome certo da coluna
unaided <- escala |>
filter(assessment == "unaided") |>
pull(acuracia)
aided <- escala |>
filter(assessment == "aided1") |>
pull(acuracia)
# Verificar distribuição e variância
hist(unaided)
length(unaided)
length(aided)
unique(escala$assessment)
unique(escala$assessment)
unaided <- escala |>
filter(assessment == "Unaided") |>
pull(acuracia)
aided <- escala |>
filter(assessment == "Aided1") |>
pull(acuracia)
length(unaided)
length(aided)
unique(escala$assessment)
# Verificar distribuição e variância
hist(unaided)
shapiro.test(unaided)
shapiro.test(aided)
var.test(unaided, aided)
var.test(unaided, aided)
## Aula 23/04
library(DHARMa)
#análise de resíduos
m2
plot(simulateResiduals(m3))
#adicionei o sqrt no m2= fiz a raiz quadrada - m2 <- lm(sqrt(count) ~ spray, data = insetos) para que melhore a homogeneidade das variancias
library(emmeans)
#em caso que não conseque fazer transformações que deixem os dados normais deve-se utilizar os testes não paramétricos
## alternativa paramétrica GLM
m4 <- glm(count ~ spray, data = insetos, family = poisson())
anova(m4)
library(car)
library(multcomp)
Anova(m4)
plot(simulateResiduals(m4))
medias_m4 <- emmeans(m4, ~ spray, type = "response")
cld(medias_m4)
library(performance)
m2 <- lm(count ~ spray, data = insetos)
hist(residuals(m2))
shapiro.test(residuals(m2))
qqnorm(residuals(m2))
qqline(residuals(m2))
check_model(m2)
library(datasets)
insetos <- InsectSprays
insetos |>
ggplot(aes(spray, count))+
geom_boxplot()+
geom_jitter(width = 0.1)
bartlett.test(count ~ spray, data = insetos)
#é possível tolerar um pouco de anormalidade dos dados, mas na homogeneeidade das variancias não é possível
m2 <- lm(sqrt(count) ~ spray, data = insetos)
hist(residuals(m2))
shapiro.test(residuals(m2))
#shapiro é mais rigoroso
qqnorm(residuals(m2))
qqline(residuals(m2))
#tem que rodar os dois juntos
## aternativa 1 - transforma a resposta em raiz quadrada (sqrt)
m3 <- lm(sqrt(count) ~ spray, data = insetos)
hist(residuals(m3))
shapiro.test(residuals(m3))
qqnorm(residuals(m3))
qqline(residuals(m3))
anova(m3)
m33 <- emmeans(m3, ~ spray, type = "response")
cld(m33)
plot(m33)
## alternativa 2 - teste não paramétrico
kruskal.test(count ~ spray, data = insetos)
kruskal_test(insetos, count ~ spray)
library(agricolae)
kruskal(insetos$count, insetos$spray, group = TRUE, console = TRUE)
#Shapirowilk verifica a normalidade dos dados, o teste de homogeneidade de variancias (levene e barlett)
## Aula 23/04
library(DHARMa)
#análise de resíduos
m2
plot(simulateResiduals(m3))
#adicionei o sqrt no m2= fiz a raiz quadrada - m2 <- lm(sqrt(count) ~ spray, data = insetos) para que melhore a homogeneidade das variancias
library(emmeans)
#em caso que não conseque fazer transformações que deixem os dados normais deve-se utilizar os testes não paramétricos
## alternativa paramétrica GLM
m4 <- glm(count ~ spray, data = insetos, family = poisson())
anova(m4)
library(car)
library(multcomp)
Anova(m4)
plot(simulateResiduals(m4))
medias_m4 <- emmeans(m4, ~ spray, type = "response")
cld(medias_m4)
library(performance)
m2 <- lm(count ~ spray, data = insetos)
hist(residuals(m2))
shapiro.test(residuals(m2))
qqnorm(residuals(m2))
qqline(residuals(m2))
check_model(m2)
wilcox.test(unaided, aided)
m2 <- lm(sqrt(count) ~ spray, data = insetos)
hist(residuals(m2))
shapiro.test(residuals(m2)) #shapiro é mais rigoroso
qqnorm(residuals(m2)); qqline(residuals(m2))
## aternativa 1 - transforma a resposta em raiz quadrada (sqrt)
m3 <- lm(sqrt(count) ~ spray, data = insetos)
hist(residuals(m3))
shapiro.test(residuals(m3))
qqnorm(residuals(m3))
qqline(residuals(m3))
anova(m3)
m33 <- emmeans(m3, ~ spray, type = "response")
cld(m33)
plot(m33)
library(emmeans)
m33 <- emmeans(m3, ~ spray, type = "response")
cld(m33)
plot(m33)
library(epifitter)
oidio <- PowderyMildew
#oidio|>
#ggplot(aes(time, sev))+
#geom_point()+
#facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
# %in% função para pegar dentro de Irrigation_type o MS
oidio2 <- oidio |> filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead"))
oidio3 <- oidio2 |>
group_by(irrigation_type, moisture, block) |>
summarize(AUDPC = AUDPC(time, sev))
oidio3 |>
ggplot(aes(irrigation_type, AUDPC, color = moisture))+
geom_point(size = 2)+
scale_y_continuous(limits = c(0,20))
library(tidyverse)
library(epifitter)
oidio <- PowderyMildew
#oidio|>
#ggplot(aes(time, sev))+
#geom_point()+
#facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead"))
|>
library(tidyverse)
library(epifitter)
oidio <- PowderyMildew
#oidio|>
#ggplot(aes(time, sev))+
#geom_point()+
#facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead"))
|>ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
library(tidyverse)
library(epifitter)
oidio <- PowderyMildew
#oidio|>
#ggplot(aes(time, sev))+
#geom_point()+
#facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
# %in% função para pegar dentro de Irrigation_type o MS
cv.model(model_oidio) #Calcula o coeficiente de variação (CV)
library(emmeans)
library(multcomp)
library(agricolae)
medias_oidio <- emmeans(model_oidio, ~ irrigation_type | moisture)
#inverter irrigation_type | moisture para comparar
medias_oidio
cld(medias_oidio) # Cria letras compactas que indicam quais grupos são significativamente diferentes
cv.model(model_oidio) #Calcula o coeficiente de variação (CV)
library(tidyverse)
library(epifitter)
oidio <- PowderyMildew
#oidio|>
#ggplot(aes(time, sev))+
#geom_point()+
#facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
# %in% função para pegar dentro de Irrigation_type o MS
oidio2 <- oidio |> filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead"))
oidio3 <- oidio2 |>
group_by(irrigation_type, moisture, block) |>
summarize(AUDPC = AUDPC(time, sev))
oidio3 |>
ggplot(aes(irrigation_type, AUDPC, color = moisture))+
geom_point(size = 2)+
scale_y_continuous(limits = c(0,20))
model_oidio <- lm(AUDPC ~ irrigation_type * moisture, data = oidio3)
anova(model_oidio)
library(DHARMa)
plot(simulateResiduals(model_oidio))
library(emmeans)
library(multcomp)
library(agricolae)
medias_oidio <- emmeans(model_oidio, ~ irrigation_type | moisture)
#inverter irrigation_type | moisture para comparar
medias_oidio
cld(medias_oidio) # Cria letras compactas que indicam quais grupos são significativamente diferentes
cv.model(model_oidio) #Calcula o coeficiente de variação (CV)
library(emmeans)
library(multcomp)
library(agricolae)
medias_oidio <- emmeans(model_oidio, ~ irrigation_type | moisture)
#inverter irrigation_type | moisture para comparar
medias_oidio
cld(medias_oidio) # Cria letras compactas que indicam quais grupos são significativamente diferentes
cv.model(model_oidio) #Calcula o coeficiente de variação (CV)
cv.model(model_oidio) #Calcula o coeficiente de variação (CV)
summary(mtcars)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# visualizando os dados
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination))+
geom_point()+
geom_line()+
facet_wrap(~ code)
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43")
library(drc)
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
# fct é o modelo escolhido
summary(m43)
AIC(m43)
plot(m43)
ED(m43, 50)
# pacote para estimar a EC50
library(ec50estimator)
df_ec50 = estimate_EC50(germination ~ dose,
data = fungi,
isolate_col = "code",
strata_col =  "state",
interval = "delta",
fct = drc::LL.3())
#gera uma tabela chamada df_ec50 c0m as informações que serão usadas para plotar o gráfico
df_ec50 |>
ggplot(aes(reorder(ID, Estimate), Estimate))+
geom_point()+
coord_flip()
# reorder irá ordernar do menor para o maior de acordo com a estimativa de ec50
df_ec50 |>
ggplot(aes(x = Estimate))+
geom_histogram(bins = 5, color = "white")
# histograma funciona para observar a distribuição dos dados, qual o padrão das frequencias
#library(MASS)
insects <- InsectSprays
m1 <- lm(sqrt(count) ~ spray, data = insects)
plot(simulateResiduals(m1))
boxcox(lm(insects$count + 0.1 ~ 1))
#qual o valor de x quando o valor de y é máximo
b <- boxcox(lm(insects$count + 0.1 ~ 1))
lambda <- b$x[which.max(b$y)]
lambda
#lambda é o valor onde y é maximo
insects <- insects |>
mutate(count2 = (count^lambda-1/lambda)) |>
mutate(count3 = sqrt(count))
insects$count2 <- (insects$count^lambda-1/lambda)
hist(insects$count2)
library(readxl)
library(lme4)
library(tidyverse)
estande <- read_excel("dados-diversos.xlsx", sheet = "estande")
m_misto <- lmer(nplants ~ trat + (1 | exp/bloco), data = estande)
summary(m_misto)
car::Anova(m_misto)
# avaliar os efeitos aleatórios de experimentos e de bloco, nese caso os efeitos de exp dentro de bloco
# nesse caso tem que fazer o anova para verificar se o valor de p é significativo
estande |>
ggplot(aes(trat, nplants, colour = factor(exp)))+
geom_point()+
#geom_smooth(method = "lm", se = FALSE)+
geom_abline(intercept = 69.74, slope = -0.568, linewidth = 2)+
geom_abline(intercept = 43, slope = -0.73, linetype = "dashed")+
geom_abline(intercept = 93, slope = -0.40, linetype = "dashed")
library(MASS)
insects <- InsectSprays
m1 <- lm(sqrt(count) ~ spray, data = insects)
plot(simulateResiduals(m1))
boxcox(lm(insects$count + 0.1 ~ 1))
#qual o valor de x quando o valor de y é máximo
b <- boxcox(lm(insects$count + 0.1 ~ 1))
lambda <- b$x[which.max(b$y)]
lambda
#lambda é o valor onde y é maximo
insects <- insects |>
mutate(count2 = (count^lambda-1/lambda)) |>
mutate(count3 = sqrt(count))
insects$count2 <- (insects$count^lambda-1/lambda)
hist(insects$count2)
library(MASS)
library(DHARMa)
library(tidyverse)
insects <- InsectSprays
m1 <- lm(sqrt(count) ~ spray, data = insects)
plot(simulateResiduals(m1))
boxcox(lm(insects$count + 0.1 ~ 1))
#qual o valor de x quando o valor de y é máximo
b <- boxcox(lm(insects$count + 0.1 ~ 1))
lambda <- b$x[which.max(b$y)]
lambda
#lambda é o valor onde y é maximo
insects <- insects |>
mutate(count2 = (count^lambda-1/lambda)) |>
mutate(count3 = sqrt(count))
insects$count2 <- (insects$count^lambda-1/lambda)
hist(insects$count2)
